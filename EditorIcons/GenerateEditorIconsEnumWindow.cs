using System;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using UnityEditor;
using UnityEngine;

namespace Packages.EditorIcons
{
    public class GenerateEditorIconsEnumWindow : EditorWindow
    {
        private const string IconEnumTemplate = @"
//This file is autogenerated!
// ReSharper disable All
namespace Packages.EditorIcons
{
    public class {EnumName}
        {
            {EnumMembers}
        }
}
";
        private const string IconPropertyTemplate = "public const string {0} = @\"{1}\";";

        private static readonly string LastSelectedEnumPathKey =
            $"{nameof(GenerateEditorIconsEnumWindow)}.{nameof(LastSelectedEnumPathKey)}";

        private static readonly string LastSelectedEnumNameKey =
            $"{nameof(GenerateEditorIconsEnumWindow)}.{nameof(LastSelectedEnumNameKey)}";

        private static string _enumName;
        private static bool _includeDarkModeIcons;

        private void OnEnable()
        {
            _enumName = EditorPrefs.GetString(LastSelectedEnumNameKey, "EditorIcon");
        }

        private void OnGUI()
        {
            _enumName = EditorGUILayout.DelayedTextField("Enum name:", _enumName);
            _includeDarkModeIcons = EditorGUILayout.Toggle("Include Dark Mode Icons:", _includeDarkModeIcons);

            if (GUILayout.Button("Generate Icon Enum"))
            {
                var lastSelectedPath = EditorPrefs.GetString(LastSelectedEnumPathKey, Application.dataPath);
                var path = EditorUtility.SaveFilePanel($"Select Location for {_enumName}", lastSelectedPath,
                    _enumName, "cs");
                if (string.IsNullOrWhiteSpace(path))
                {
                    return;
                }

                EditorPrefs.SetString(LastSelectedEnumPathKey, path);
                EditorPrefs.SetString(LastSelectedEnumNameKey, _enumName);

                var enumMembers = EditorIconsList.Icons
                    .Select(iconName => iconName.name)
                    .Where(iconName => _includeDarkModeIcons || !iconName.StartsWith(EditorIconsUtility.DarkModePrefix))
                    .Select(iconName =>
                    {
                        var sanitizedPropertyName = Regex.Replace(iconName, @"^[^a-zA-Z_]|[^a-zA-Z0-9]*", string.Empty,
                            RegexOptions.None);
                        if (iconName.StartsWith(EditorIconsUtility.DarkModePrefix))
                        {
                            sanitizedPropertyName =
                                $"{iconName.Replace(EditorIconsUtility.DarkModePrefix, string.Empty)}DarkMode";
                        }
                        return string.Format(IconPropertyTemplate, sanitizedPropertyName, iconName);
                    })
                    .Distinct()
                    .Aggregate((l, r) => $"{l}{Environment.NewLine}\t\t\t{r}");
                var enumFileContent = IconEnumTemplate
                    .Replace("{EnumName}", _enumName)
                    .Replace("{EnumMembers}", enumMembers);
                try
                {
                    File.WriteAllText(path, enumFileContent);
                    AssetDatabase.Refresh();
                }
                catch (Exception e)
                {
                    Debug.LogException(e);
                }
            }
        }
    }
}